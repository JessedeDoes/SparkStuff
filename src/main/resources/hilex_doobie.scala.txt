import doobie.imports._ 
import scalaz._, Scalaz._, scalaz.concurrent.Task
import scalaz.effect.IO
//import scala.reflect.runtime.universe.TypeTag
//import org.postgresql.util.PGobject

case class hilex.Lemma(modern_lemma: String, lemma_id:Int, pos:String)
case class hilex.Wordform(lemma: hilex.Lemma, analyzed_wordform_id:Int, wordform: String)
case class hilex.Attestation(wordform: hilex.Wordform, quote:String, hitStart: Int, hitEnd: Int)

object queries
{
    val wfQuery = sql"""
select modern_lemma, l.lemma_id,lemma_part_of_speech, analyzed_wordform_id, wordform
     from data.lemmata l, data.analyzed_wordforms a, data.wordforms w
where
     l.lemma_id=a.lemma_id
     AND w.wordform_id=a.wordform_id
     AND lemma_part_of_speech ~  'ADP'"""
  
  val attestationQuery = sql"""
select 
    modern_lemma, l.lemma_id,lemma_part_of_speech, a.analyzed_wordform_id, wordform,
      quote, start_pos,end_pos
     from data.lemmata l, data.analyzed_wordforms a, data.wordforms w, data.token_attestations t
where
     l.lemma_id=a.lemma_id
     AND w.wordform_id=a.wordform_id
     AND a.analyzed_wordform_id=t.analyzed_wordform_id"""

    
  
    
   /*
   def lemmaQuery(where: String) =
     sql""" select modern_lemma, l.lemma_id,lemma_part_of_speech ${where}""".query[hilex.Lemma]
     * 
     */
    
    /*
  def wordformsForLemmata(lemmata: NonEmptyList[hilex.Lemma]) =
   {
      val lemmaIds = lemmata.map(_.lemma_id)
      implicit val idParam = Param.many(lemmaIds)
      sql"""
select modern_lemma, l.lemma_id,lemma_part_of_speech, analyzed_wordform_id, wordform
     from data.lemmata l, data.analyzed_wordforms a, data.wordforms w
where
     l.lemma_id=a.lemma_id
     AND w.wordform_id=a.wordform_id
     AND lemma_id in (${lemmaIds: lemmaIds.type}) 
""".query[hilex.Wordform].list
   } 
   * 
   */
 
  
}

object Hilex 
{
  // dbc:postgresql://svowdb06/gig_pro?user=fannee&password=Cric0topus
  val atHome = false
  
  lazy val  xaWork = DriverManagerTransactor[IO](
				  "org.postgresql.Driver", "jdbc:postgresql://svowdb06/gigant_hilex", "fannee", "Cric0topus"
				  )
	lazy val xaHome = DriverManagerTransactor[IO](
				  "org.postgresql.Driver", "jdbc:postgresql://localhost/gigant_hilex_dev", "postgres", "inl"
				  )
  lazy val xa = if (atHome) xaHome else xaWork
  
  import xa.yolo._
  

   
  def testje =
  {
   


    val program2 = sql"""select modern_lemma, lemma_id,lemma_part_of_speech
        from data.lemmata where lemma_part_of_speech ~  'CON'""".query[hilex.Lemma].list
    val task2 = program2.transact(xa)
    println(task2.unsafePerformIO)
  //def find(n: String): ConnectionIO[Option[Country]] =
  //sql"select code, name, population from country where name = $n".query[Country].option

  // kb.And then
  //find("France").transact(xa).unsafePerformIO
  }
 
 
  
  def test2 = 
  {
    val program2 = queries.wfQuery.query[hilex.Wordform].list
    val task2 = program2.transact(xa)
    println(task2.unsafePerformIO)
  }
   
  /*
     def populationIn(range: Range, codes: NonEmptyList[String]) = {
  implicit val codesParam = Param.many(codes)
  sql"""
    select code, name, population, gnp 
    from country
    where population > ${range.min}
    and   population < ${range.max}
    and   code in (${codes : codes.type})
  """.query[hilex.Lemma]
     }
     * */
    
   def main(args:Array[String]):Unit = test2
     
}